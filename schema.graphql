# source: http://localhost:4567/graphql
# timestamp: Thu Mar 14 2019 23:37:03 GMT-0700 (PDT)

"""Autogenerated input type of CreateInterface"""
input CreateInterfaceInput {
  reponame: String!
  attributes: InterfaceAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateInterface"""
type CreateInterfacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  interface: Interface
}

"""Autogenerated input type of CreateNode"""
input CreateNodeInput {
  reponame: String!
  attributes: NodeAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateNode"""
type CreateNodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  node: Node
}

"""Autogenerated input type of CreateRelationship"""
input CreateRelationshipInput {
  reponame: String!
  attributes: RelationshipAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRelationship"""
type CreateRelationshipPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  relationship: Relationship
}

"""Autogenerated input type of CreateRepo"""
input CreateRepoInput {
  attributes: RepoAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRepo"""
type CreateRepoPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  repo: Repo
}

"""Autogenerated input type of CreateUser"""
input CreateUserInput {
  attributes: UserAttributes!
  password: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateUser"""
type CreateUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""Autogenerated input type of DeleteInterface"""
input DeleteInterfaceInput {
  reponame: String!
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteInterface"""
type DeleteInterfacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
}

"""Autogenerated input type of DeleteNode"""
input DeleteNodeInput {
  reponame: String!
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteNode"""
type DeleteNodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
}

"""Autogenerated input type of DeleteRelationship"""
input DeleteRelationshipInput {
  reponame: String!
  id: ID!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteRelationship"""
type DeleteRelationshipPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
}

"""Autogenerated input type of DeleteRepo"""
input DeleteRepoInput {
  reponame: String!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteRepo"""
type DeleteRepoPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
}

type Interface {
  id: ID!
  label: String!
  properties: [Property]!
  repoId: ID!
  type: String!
}

input InterfaceAttributes {
  label: String
  properties: JSON
}

scalar JSON

type Mutation {
  createInterface(input: CreateInterfaceInput!): CreateInterfacePayload
  createNode(input: CreateNodeInput!): CreateNodePayload
  createRelationship(input: CreateRelationshipInput!): CreateRelationshipPayload
  createRepo(input: CreateRepoInput!): CreateRepoPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  deleteInterface(input: DeleteInterfaceInput!): DeleteInterfacePayload
  deleteNode(input: DeleteNodeInput!): DeleteNodePayload
  deleteRelationship(input: DeleteRelationshipInput!): DeleteRelationshipPayload
  deleteRepo(input: DeleteRepoInput!): DeleteRepoPayload
  updateInterface(input: UpdateInterfaceInput!): UpdateInterfacePayload
  updateNode(input: UpdateNodeInput!): UpdateNodePayload
  updateRelationship(input: UpdateRelationshipInput!): UpdateRelationshipPayload
  updateRepo(input: UpdateRepoInput!): UpdateRepoPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
}

type Node {
  id: ID!
  inRelationships: [Relationship]!
  label: String!
  outRelationships: [Relationship]!
  properties: [Property]!
  repoId: ID!
  type: String!
}

input NodeAttributes {
  label: String
  properties: JSON
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Property {
  key: String!
  valueType: String!
}

type Query {
  interface(username: String!, reponame: String!, id: ID!): Interface
  node(username: String!, reponame: String!, id: ID!): Node
  relationship(username: String!, reponame: String!, id: ID!): Relationship
  repo(username: String!, reponame: String!): Repo
  user(username: String!): User
  version: String
}

type Relationship {
  fromNode: Node!
  id: ID!
  properties: [Property]!
  relType: String!
  toNode: Node!
}

input RelationshipAttributes {
  relType: String
  to: ID
  from: ID
  properties: JSON
}

type Repo {
  id: ID!
  interface(id: String = null, label: String = null): Interface
  interfaces: [Interface]!
  name: String!
  node(id: String = null, label: String = null): Node
  nodes: [Node]!
  userId: ID!
}

input RepoAttributes {
  name: String
}

"""The connection type for Repo."""
type RepoConnection {
  """A list of edges."""
  edges: [RepoEdge]

  """A list of nodes."""
  nodes: [Repo]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type RepoEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Repo
}

"""Autogenerated input type of UpdateInterface"""
input UpdateInterfaceInput {
  reponame: String!
  id: ID!
  attributes: InterfaceAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateInterface"""
type UpdateInterfacePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  interface: Interface
}

"""Autogenerated input type of UpdateNode"""
input UpdateNodeInput {
  reponame: String!
  id: ID!
  attributes: NodeAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateNode"""
type UpdateNodePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  node: Node
}

"""Autogenerated input type of UpdateRelationship"""
input UpdateRelationshipInput {
  reponame: String!
  id: ID!
  attributes: RelationshipAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRelationship"""
type UpdateRelationshipPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  relationship: Relationship
}

"""Autogenerated input type of UpdateRepo"""
input UpdateRepoInput {
  reponame: String!
  attributes: RepoAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRepo"""
type UpdateRepoPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  repo: Repo
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput {
  attributes: UserAttributes!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUser"""
type UpdateUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  user: User
}

type User {
  dep: String @deprecated(reason: "This is deprecated")
  email: String!
  fname: String!
  fullname: String!
  id: ID!
  lname: String!
  namearr: [String]!
  preferences: JSON!
  repo(id: String = null, name: String = null): Repo
  repos: [Repo]!
  reposConnection(
    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): RepoConnection!
  token(password: String!): String

  """A description"""
  uname: String!
  username: String!
}

input UserAttributes {
  username: String
  fname: String
  lname: String
  email: String
  preferences: JSON
}
